// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAppAPI.Infrastructure;

namespace TravelAppAPI.Infrastructure.Migrations
{
    [DbContext(typeof(TravelAppContext))]
    [Migration("20190509121806_RefactoringModels")]
    partial class RefactoringModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelAppAPI.Models.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RouteId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("TravelAppAPI.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longtitude");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("TravelAppAPI.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TravelAppAPI.Models.RouteToPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlaceId");

                    b.Property<int?>("RouteId");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RouteId");

                    b.ToTable("RoutesToPlaces");
                });

            modelBuilder.Entity("TravelAppAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelAppAPI.Models.Favourite", b =>
                {
                    b.HasOne("TravelAppAPI.Models.Route")
                        .WithMany("Favourites")
                        .HasForeignKey("RouteId");

                    b.HasOne("TravelAppAPI.Models.User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TravelAppAPI.Models.Route", b =>
                {
                    b.HasOne("TravelAppAPI.Models.User")
                        .WithMany("Routes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TravelAppAPI.Models.RouteToPlace", b =>
                {
                    b.HasOne("TravelAppAPI.Models.Place")
                        .WithMany("routeToPlaces")
                        .HasForeignKey("PlaceId");

                    b.HasOne("TravelAppAPI.Models.Route")
                        .WithMany("RouteToPlaces")
                        .HasForeignKey("RouteId");
                });
#pragma warning restore 612, 618
        }
    }
}
